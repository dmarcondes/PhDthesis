e <- sum(sample$y != sample[[gsub(pattern = " ",replacement = "",x = names[i])]])/nrow(sample)
if(is.null(result))
result <- data.frame("Model" = names[i],"Error" = e)
else
result <- rbind.data.frame(result,data.frame("Model" = names[i],"Error" = e))
}
#Simulate
if(simulate){
for(i in 1:length(predict)){
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][1] <- init_value
for(j in 1:nrow(sample)){
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j] <-
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j]*(1 +
as.numeric(sample[[gsub(pattern = " ",replacement = "",x = names[i])]][j])*sample$variation[j])
if(j < nrow(sample)){
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j+1] <-
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j]
}
}
}
#Obseverd
sample$sim_Observed[1] <- init_value
for(j in 1:nrow(sample)){
sample$sim_Observed[j] <- sample$sim_Observed[j]*(1 + as.numeric(sample$y[j])*sample$variation[j])
if(j < nrow(sample)){
sample$sim_Observed[j+1] <- sample$sim_Observed[j]
}
}
#Plot
tmp <- sample %>% select(date,paste("sim_",gsub(pattern = " ",replacement = "",x = names),sep = ""),"sim_Observed") %>% gather("Model","value",-date)
tmp$Model <- factor(gsub(pattern = "sim_",replacement = "",x = tmp$Model),c("Observed",names))
p <- ggplot(tmp,aes(x = date,y = value,group = Model,color = Model)) + theme_linedraw() + titles + geom_line() + xlab("Date") + ylab("Simulated value")
}
else
p <- NULL
return(list("sample" = sample,"result" = result,"plot" = p))
}
e <- error_models(sample,predict,names,simulate = T,init_value = 1000)
e$plot
error_models <- function(sample,predict,names,simulate = F,init_value = 1000){
#Tema para os gráficos
titles <- theme(strip.text = element_text(size = 12), axis.text = element_text(size = 12,
color = "black"), axis.title = element_text(size = 14), legend.text = element_text(size = 14),
legend.title = element_text(size = 14), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.border = element_blank(),
panel.background = element_rect(fill="white",size=0.5, linetype="solid",color = "black"),
legend.background = element_rect(fill="white",size=0.5, linetype="solid",color = "black"),
legend.position="bottom",legend.spacing.x = unit(0.5, 'cm'))
result <- NULL
for(i in 1:length(predict)){
sample[[gsub(pattern = " ",replacement = "",x = names[i])]] <- NA
for(j in 1:nrow(sample))
sample[[gsub(pattern = " ",replacement = "",x = names[i])]][j] <- predict[[i]](sample$x[j])
#Error
e <- sum(sample$y != sample[[gsub(pattern = " ",replacement = "",x = names[i])]])/nrow(sample)
if(is.null(result))
result <- data.frame("Model" = names[i],"Error" = e)
else
result <- rbind.data.frame(result,data.frame("Model" = names[i],"Error" = e))
}
#Simulate
if(simulate){
for(i in 1:length(predict)){
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][1] <- init_value
for(j in 1:nrow(sample)){
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j] <-
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j]*(1 +
as.numeric(sample[[gsub(pattern = " ",replacement = "",x = names[i])]][j])*sample$variation[j])
if(j < nrow(sample)){
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j+1] <-
sample[[paste("sim_",gsub(pattern = " ",replacement = "",x = names[i]),sep = "")]][j]
}
}
}
#Obseverd
sample$sim_Observed[1] <- init_value
for(j in 1:nrow(sample)){
sample$sim_Observed[j] <- sample$sim_Observed[j]*(1 + as.numeric(sample$y[j])*sample$variation[j])
if(j < nrow(sample)){
sample$sim_Observed[j+1] <- sample$sim_Observed[j]
}
}
#Plot
tmp <- sample %>% select(date,paste("sim_",gsub(pattern = " ",replacement = "",x = names),sep = ""),"sim_Observed") %>% gather("Model","value",-date)
tmp$Model <- factor(gsub(pattern = "sim_",replacement = "",x = tmp$Model),c("Observed",names))
p <- ggplot(tmp,aes(x = date,y = value,group = Model,color = Model)) + theme_linedraw() + titles + geom_line() + xlab("Date") + ylab("Simulated value")
}
else{
tmp <- NULL
p <- NULL
}
return(list("sample" = sample,"result" = result,"plot" = p,"data_plot" = tmp))
}
e <- error_models(sample,predict,names,simulate = T,init_value = 1000)
e$plot
e$data_plot
library(devtools)
document()
setwd("~/GDrive/Doutorado/Códigos/MarkovLS")
document()
document()
document()
document()
document()
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
library(devtools)
document()
library(MarkovLS)
library(MarkovLS)
library(MarkovLS)
document()
library(MarkovLS)
library(autoAnalise)
library(tidyverse)
setwd("~/Dropbox/Assessoria Estatística/Estatística/2022/Maisa/Figuras")
#wd
setwd("~/Dropbox/Assessoria Estatística/Estatística/2022/Maisa/Figuras")
#Dados
dados3 <- data.frame(read_xlsx("~/Dropbox/Assessoria Estatística/Estatística/2022/Maisa/Dados/dados_maisa.xlsx",sheet = 1))
dados2 <- data.frame(read_xlsx("~/Dropbox/Assessoria Estatística/Estatística/2022/Maisa/Dados/dados_maisa.xlsx",sheet = 2))
summary(dados2)
summary(dados3)
figura <- 1
tabela <- 1
figura <- 1
an <- F
for(i in 1:5)
dados3[[paste("cat_j",i,sep = "")]] <- mapvalues(factor(dados3[[paste("j",i,sep = "")]]),c("1","2","3"),
c("Não atende","Atende parcialmente","Atende"))
for(i in 1:5)
dados3[[paste("cat_j",i,sep = "")]] <- plyr::mapvalues(factor(dados3[[paste("j",i,sep = "")]]),c("1","2","3"),
c("Não atende","Atende parcialmente","Atende"))
for(i in 1:5)
dados2[[paste("cat_j",i,sep = "")]] <- plyr::mapvalues(factor(dados2[[paste("j",i,sep = "")]]),c("1","2"),
c("Não atende","Atende"))
summary(dados2)
summary(dados3)
tabela <- 1
figura <- 1
an <- F
cat("\n")
cat(paste("\\section{Análise Descritiva}"))
cat("\n")
cat("\n")
cat(paste("\\subsection{Três categorias}"))
cat("\n")
for(f in unique(dados3$fator)){
}
names(dados3)
tmp <- dados3 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("a","b")
tmp
dados3 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5)
dados3 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("a","b")
tmp <- dados3 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("Juiz","Avaliação")
tmp$Juiz <- plyr::mapvalues(factor(tmp$Juiz),c("cat_j1","cat_j2","cat_j3","cat_j4","cat_j5"),c("Juiz 1","Juiz 32","Juiz 3","Juiz 4","Juiz 5"))
tmp$Juiz
auto_resumo(x = tmp$Juiz,y = tmp$Avaliação)
auto_resumo(x = tmp$Juiz,y = factor(tmp$Avaliação))
f
tmp <- dados3 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("Juiz","Avaliação")
tmp$Juiz <- plyr::mapvalues(factor(tmp$Juiz),c("cat_j1","cat_j2","cat_j3","cat_j4","cat_j5"),c("Juiz 1","Juiz 32","Juiz 3","Juiz 4","Juiz 5"))
cat("\n")
r <- relacao(x = tmp$Juiz,y = factor(tmp$Avaliação),figura = figura,tabela = tabela,xlab = "Juiz",
ylab = paste("Avaliação questões do fator",f),arquivo_tab = "tabelas_maisa.xlsx",teste = F,anexar = an)
r$plot + scale_fill_manual(values = c("white","black","gray"))
r$plot + scale_fill_manual(values = c("gray0","gary50","gray87"))
r$plot + scale_fill_manual(values = c("gray0","gray50","gray87"))
salvar_plot(p = p,arquivo = paste("Figura",figura,".pdf",sep = ""),latex = F)
p <- r$plot + scale_fill_manual(values = c("gray0","gray50","gray87"))
salvar_plot(p = p,arquivo = paste("Figura",figura,".pdf",sep = ""),latex = F)
paste("Figura",figura,".pdf",sep = "")
for(f in unique(dados3$fator)){
tmp <- dados3 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("Juiz","Avaliação")
tmp$Juiz <- plyr::mapvalues(factor(tmp$Juiz),c("cat_j1","cat_j2","cat_j3","cat_j4","cat_j5"),c("Juiz 1","Juiz 32","Juiz 3","Juiz 4","Juiz 5"))
cat("\n")
r <- relacao(x = tmp$Juiz,y = factor(tmp$Avaliação),figura = figura,tabela = tabela,xlab = "Juiz",
ylab = paste("Avaliação questões do fator",f),arquivo_tab = "tabelas_maisa.xlsx",teste = F,anexar = an)
cat("\n")
p <- r$plot + scale_fill_manual(values = c("gray0","gray50","gray87"))
salvar_plot(p = p,arquivo = paste("Figura",figura,".pdf",sep = ""),latex = F)
figura <- r$figura
tabela <- r$tabela
}
cat("\n")
cat(paste("\\subsection{Duas categorias}"))
cat("\n")
for(f in unique(dados2$fator)){
tmp <- dados2 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("Juiz","Avaliação")
tmp$Juiz <- plyr::mapvalues(factor(tmp$Juiz),c("cat_j1","cat_j2","cat_j3","cat_j4","cat_j5"),c("Juiz 1","Juiz 32","Juiz 3","Juiz 4","Juiz 5"))
cat("\n")
r <- relacao(x = tmp$Juiz,y = factor(tmp$Avaliação),figura = figura,tabela = tabela,xlab = "Juiz",
ylab = paste("Avaliação questões do fator",f),arquivo_tab = "tabelas_maisa.xlsx",teste = F,anexar = an)
cat("\n")
p <- r$plot + scale_fill_manual(values = c("gray0","gray50","gray87"))
salvar_plot(p = p,arquivo = paste("Figura",figura,".pdf",sep = ""),latex = F)
figura <- r$figura
tabela <- r$tabela
}
tmp <- dados3 %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("Juiz","Avaliação")
tmp$Juiz <- plyr::mapvalues(factor(tmp$Juiz),c("cat_j1","cat_j2","cat_j3","cat_j4","cat_j5"),c("Juiz 1","Juiz 32","Juiz 3","Juiz 4","Juiz 5"))
cat("\n")
r <- relacao(x = tmp$Juiz,y = factor(tmp$Avaliação),figura = figura,tabela = tabela,xlab = "Juiz",
ylab = "Avaliação todas as questões",arquivo_tab = "tabelas_maisa.xlsx",teste = F,anexar = an)
r <- relacao(x = tmp$Juiz,y = factor(tmp$Avaliação),figura = figura,tabela = tabela,xlab = "Juiz",
ylab = "Avaliação todas as questões",arquivo_tab = "tabelas_maisa.xlsx",teste = F,anexar = an)
cat("\n")
p <- r$plot + scale_fill_manual(values = c("gray0","gray50","gray87"))
p
salvar_plot(p = p,arquivo = paste("Figura",figura,".pdf",sep = ""),latex = F)
figura <- r$figura
tabela <- r$tabela
tmp <- dados2 %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5) %>% gather("Juiz","Avaliação")
tmp$Juiz <- plyr::mapvalues(factor(tmp$Juiz),c("cat_j1","cat_j2","cat_j3","cat_j4","cat_j5"),c("Juiz 1","Juiz 32","Juiz 3","Juiz 4","Juiz 5"))
cat("\n")
r <- relacao(x = tmp$Juiz,y = factor(tmp$Avaliação),figura = figura,tabela = tabela,xlab = "Juiz",
ylab = "Avaliação todas as questões",arquivo_tab = "tabelas_maisa.xlsx",teste = F,anexar = an)
cat("\n")
p <- r$plot + scale_fill_manual(values = c("gray0","gray50","gray87"))
salvar_plot(p = p,arquivo = paste("Figura",figura,".pdf",sep = ""),latex = F)
figura <- r$figura
tabela <- r$tabela
library(irr)
tmp <- dados3 %>% filter(fator == f)
tmp <- dados3 %>% filter(fator == f) %>% select(cat_j1,cat_j2,cat_j3,cat_j4,cat_j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
k
tmp
tmp <- dados3 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
tmp
tmp <- dados3 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
k
k$irr.name
tab <- NULL
k$statistic
k$value
k$statistic
k$value
library(raters)
install.packages("raters")
library(autoAnalise)
concordance(tmp,test="MC",B=100)
library(raters)
concordance(tmp,test="MC",B=100)
k
library(boot)
bt <- boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000)
bt
bt <- boot.ci(boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000))
bt
bt$normal
?boot.ci
paste(round(bt$normal[-1],3),collapse = -)
paste(round(bt$normal[-1],3),collapse = "-")
tab <- data.frame("Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",round(bt$normal[3],3),"]",sep = ""))
tab
tab <- NULL
for(f in unique(dados3$fator)){
tmp <- dados3 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
bt <- boot.ci(boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000))
if(is.null(tab))
tab <- data.frame("Categorias"= 3,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",round(bt$normal[3],3),"]",sep = ""))
else
tab <- rbind.data.frame(tab,
data.frame("Categorias"= 3,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",
round(bt$normal[3],3),"]",sep = "")))
}
tab
for(f in unique(dados2$fator)){
tmp <- dados2 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
bt <- boot.ci(boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000))
tab <- rbind.data.frame(tab,
data.frame("Categorias"= 2,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",
round(bt$normal[3],3),"]",sep = "")))
}
tab
unique(dados2$fator)
k <- kappa2(ratings = tmp)
tab <- NULL
for(f in unique(dados3$fator)){
tmp <- dados3 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
bt <- boot.ci(boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000))
if(is.null(tab))
tab <- data.frame("Categorias"= 3,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",round(bt$normal[3],3),"]",sep = ""))
else
tab <- rbind.data.frame(tab,
data.frame("Categorias"= 3,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",
round(bt$normal[3],3),"]",sep = "")))
}
for(f in unique(dados2$fator)){
tmp <- dados2 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
bt <- boot.ci(boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000))
tab <- rbind.data.frame(tab,
data.frame("Categorias"= 2,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",
round(bt$normal[3],3),"]",sep = "")))
}
tmp
f
tab <- NULL
for(f in unique(dados3$fator)){
tmp <- dados3 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
bt <- boot.ci(boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000))
if(is.null(tab))
tab <- data.frame("Categorias"= 3,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",round(bt$normal[3],3),"]",sep = ""))
else
tab <- rbind.data.frame(tab,
data.frame("Categorias"= 3,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",
round(bt$normal[3],3),"]",sep = "")))
}
for(f in unique(dados2$fator)){
if(f != "Habilidades Visuoespaciais"){
tmp <- dados2 %>% filter(fator == f) %>% select(j1,j2,j3,j4,j5)
k <- kappam.fleiss(ratings = tmp,detail = F)
bt <- boot.ci(boot(tmp, function(x, idx) {kappam.fleiss(x[idx,])$value}, R=1000))
tab <- rbind.data.frame(tab,
data.frame("Categorias"= 2,"Fator" = f,"Kappa" = k$value,"IC" = paste("[",round(bt$normal[2],3),",",
round(bt$normal[3],3),"]",sep = "")))
}
else{
tab <- rbind.data.frame(tab,
data.frame("Categorias"= 2,"Fator" = f,"Kappa" = NA,"IC" = NA))
}
}
cat("\n")
salvar_xlsx(x = tab,arquivo = "tabelas_maisa.xlsx",planilha = paste("Tabela",tabela),anexar = T,row.names = F,col.names = T,latex = T,
legenda = "Kappa de Fleiss.",digits = 3)
View(tab)
#wd
setwd("~/GDrive/Doutorado/Códigos/Aplicação Markov Chain/Resultados finais servidor")
#wd
setwd("~/GDrive/Doutorado/Códigos/Aplicação Markov Chain/Resultados finais servidor")
#####Bitcoin Example####
dados <- readRDS("data_bitcoin.rds")
#####Saida####
dados <- readRDS("data_bitcoin_final.rds")
train <- dados %>% filter(sample == "Train")
val <- dados %>% filter(sample == "Validation")
test <- dados %>% filter(sample == "Test")
#library(crypto2)
#library(priceR)
#library(tidyquant)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(MarkovLS)
library(xtable)
library(RColorBrewer)
library(ggpubr)
titles <- theme(strip.text = element_text(size = 12), axis.text = element_text(size = 12,
color = "black"), axis.title = element_text(size = 14), legend.text = element_text(size = 14),
legend.title = element_text(size = 14), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.border = element_blank(),
panel.background = element_rect(fill="white",size=0.5, linetype="solid",color = "black"),
legend.background = element_rect(fill="white",size=0.5, linetype="solid",color = "black"),
legend.position="bottom",legend.spacing.x = unit(0.5, 'cm'))
#wd
setwd("~/GDrive/Doutorado/Códigos/Aplicação Markov Chain/Resultados finais servidor")
#####Saida####
dados <- readRDS("data_bitcoin_final.rds")
train <- dados %>% filter(sample == "Train")
val <- dados %>% filter(sample == "Validation")
test <- dados %>% filter(sample == "Test")
k=30
#Lost sample
train <- train %>% filter(nchar(x) >= k)
#All sample
all_sample <- rbind.data.frame(train,val)
#x that matter
train$x <- substr(train$x,1,k)
val$x <- substr(val$x,1,k)
all_sample$x <- substr(all_sample$x,1,k)
#Frequency tables
tab_train <- as.matrix(table(train$x,train$y))
tab_train
names(train)
names(train)[4] <- "weight"
names(val)[4] <- "weight"
#Lost sample
train <- train %>% filter(nchar(x) >= k)
#All sample
all_sample <- rbind.data.frame(train,val)
#x that matter
train$x <- substr(train$x,1,k)
val$x <- substr(val$x,1,k)
all_sample$x <- substr(all_sample$x,1,k)
train$key <- paste(train$x,train$y,"-")
train <- data.table(train)
library(data.table)
train$key <- paste(train$x,train$y,"-")
train <- data.table(train)
tab_train <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight)))
tab_train
tab_train <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% data.frame()
tab_train
tab_train <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tab_train <- as.matrix(table(train$x,train$y))
tab_train2 <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tab_train <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tab_train[,1]
train$key <- paste(train$x,train$y,sep = "-")
tab_train <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tab_train[,1]
lapply(strsplit(tab_train[,1],split = "-")
lapply(strsplit(tab_train[,1],split = "-"))
lapply(strsplit(tab_train[,1],split = "-"))
lapply(strsplit(tab_train[,1],split = "-"))
strsplit(tab_train[,1],split = "-")
unlist(lapply(strsplit(tab_train[,1],split = "-"),function(x) x[1]))
rownames(tab_train) <- unlist(lapply(strsplit(tab_train[,1],split = "-"),function(x) x[1]))
sum(rownames(tab_train) == roenames(tab_train2))
sum(rownames(tab_train) == rownames(tab_train2))
tab_train2 <- as.matrix(table(train$x,train$y))
sum(rownames(tab_train) == rownames(tab_train2))
tab_train <- cbind(tab_train,unlist(lapply(strsplit(tab_train[,1],split = "-"),function(x) x[1])))
tab_train <- cbind(tab_train,unlist(lapply(strsplit(tab_train[,1],split = "-"),function(x) x[2])))
tab_train <- tab_train[,-1]
View(tab_train)
tmp <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[1])))
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[2])))
tmp <- tmp[,-1]
tmp[,2]
tab_train <- matrix(data = 0,nrow = length(unique(tmp[,2])),ncol = 2)
x <- tmp[1,2]
tmp[tmp[,2] == x,3]
i <- 1
head(tab_train2)
tmp[tmp[,2] == x & tmp[,3] == "1",1]
as.numeric(tmp[tmp[,2] == x & tmp[,3] == "1",1])
as.numeric(tmp[tmp[,2] == x & tmp[,3] == "0",1])
"0" %in% tmp[tmp[,2] == x,3]
train$key <- paste(train$x,train$y,sep = "-")
tmp <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[1])))
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[2])))
tmp <- tmp[,-1]
tab_train <- matrix(data = 0,nrow = length(unique(tmp[,2])),ncol = 2)
i <- 1
for(x in unique(tmp[,2])){
if("1" %in% tmp[tmp[,2] == x,3])
tab_train[i,2] <- as.numeric(tmp[tmp[,2] == x & tmp[,3] == "1",1])
if("0" %in% tmp[tmp[,2] == x,3])
tab_train[i,1] <- as.numeric(tmp[tmp[,2] == x & tmp[,3] == "0",1])
}
rownames(tab_train) <- unique(tmp[,2])
sum(rownames(tab_train) == rownames(tab_train2))
sum(tab_train[tab_train2 == 0])
sum(tab_train[tab_train2 == 1])
tab_train[tab_train2 == 1]
train$key <- paste(train$x,train$y,sep = "-")
tmp <- train %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[1])))
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[2])))
tmp <- tmp[,-1]
tab_train <- matrix(data = 0,nrow = length(unique(tmp[,2])),ncol = 2)
i <- 1
for(x in unique(tmp[,2])){
if("1" %in% tmp[tmp[,2] == x,3])
tab_train[i,2] <- as.numeric(tmp[tmp[,2] == x & tmp[,3] == "1",1])
if("0" %in% tmp[tmp[,2] == x,3])
tab_train[i,1] <- as.numeric(tmp[tmp[,2] == x & tmp[,3] == "0",1])
i <- i + 1
}
rownames(tab_train) <- unique(tmp[,2])
View(tab_train)
sum(tab_train[tab_train2 == 0])
sum(tab_train[tab_train2 == 1])
#Val
val$key <- paste(val$x,val$y,sep = "-")
tmp <- val %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[1])))
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[2])))
tmp <- tmp[,-1]
tab_val <- matrix(data = 0,nrow = length(unique(tmp[,2])),ncol = 2)
i <- 1
#Val
val$key <- paste(val$x,val$y,sep = "-")
tmp <- val %>% group_by(key) %>% summarise("weight" = sum(abs(weight))) %>% as.matrix()
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[1])))
tmp <- cbind(tmp,unlist(lapply(strsplit(tmp[,1],split = "-"),function(x) x[2])))
tmp <- tmp[,-1]
tab_val <- matrix(data = 0,nrow = length(unique(tmp[,2])),ncol = 2)
i <- 1
for(x in unique(tmp[,2])){
if("1" %in% tmp[tmp[,2] == x,3])
tab_val[i,2] <- as.numeric(tmp[tmp[,2] == x & tmp[,3] == "1",1])
if("0" %in% tmp[tmp[,2] == x,3])
tab_val[i,1] <- as.numeric(tmp[tmp[,2] == x & tmp[,3] == "0",1])
i <- i + 1
}
rownames(tab_val) <- unique(tmp[,2])
View(tab_val)
library(MarkovLS)
library(devtools)
document()
setwd("~/GDrive/Doutorado/Códigos/MarkovLS")
document()
library(MarkovLS)
